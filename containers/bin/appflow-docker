#!/bin/bash

#
# Install:
#
#   curl -Ls https://goo.gl/dkvWtT > /tmp/appflow-docker ; bash /tmp/appflow-docker
#
# Firstrun:
#
#   make provision tenant=mrrobot limit=atlantis firstrun=true
#
# Troubleshooting:
#
#   Q: Hangs on: injecting ssh key...
#   A: Probably you have a passphrase on ~/.ssh/id_rsa, just do:
#      docker run -u $UID --rm -v ssh:/ssh -v $HOME:$HOME -t whilp/ssh-agent:latest ssh-add $HOME/.ssh/id_rsa
#      and insert passphrase when asked.
#
# TODO:
#
#   Add check: check_ssh_passphrase().
#   Issue with checkin, we need to pass /tmp probably also.
#   Check for ~/.gitconfig
#   appflow ssh has issues (installs always assh): https://github.com/ttssdev/appflow/blob/master/utils/ssh.sh
#

# volumes
#
#	~/.ansible
#	~/.appflow
#	~/.ssh
#	~/.gitconfig
#	# /tmp

CFG_DOCKER_VOLUMES="-v $HOME/.appflow:/home/appflow/.appflow -v $HOME/.ssh:/home/appflow/.ssh -v $HOME/.gitconfig:/home/appflow/.gitconfig:ro -v /tmp:/tmp"
CFG_DOCKER_ENVS="-e ANSIBLE_HOST_KEY_CHECKING=False -e ANSIBLE_SSH_CONTROL_PATH="/home/appflow/tmp/.ssh/cm/%%C.sock" -e ANSIBLE_RETRY_FILES_ENABLED="False" -e LOCAL_USER_ID=$UID"

function check_selinux() {

  RES=$(command -v foo >/dev/null 2>&1)
  if [[ $? -eq 0 ]]; then

    SELINUX=$(getenforce)
    if (( $? != 127 )); then
      if [ "$SELINUX" = "Enforcing" ]; then
        sudo chcon -Rt svirt_sandbox_file_t /tmp
        sudo chcon -Rt svirt_sandbox_file_t $HOME
      fi
    fi
  fi
}

function check_dirs() {
  local rc=-1

  if [ -d "$HOME/.appflow" ]; then
    if [ -d "$HOME/.ssh" ]; then
      rc=0
    fi
  fi

  return $rc
}

function check_docker() {
  local rc=-1

  RES=$(docker --version | grep "Docker version")
  if [[ $? -eq 0 ]]; then
    RES=$(docker ps)
    if [[ $? -eq 0 ]]; then
      rc=0
    fi
  fi

  return $rc
}

function check_ssh_agent_container() {
  local rc=-1

  RES=$(docker ps -q -f status=exited -f name=^/ssh-agent$)
  if [ "${RES}" ]; then
    echo -n "starting whilp/ssh-agent... "
    $(docker start ssh-agent > /dev/null)
    if [[ $? -eq 0 ]]; then
      echo "done."
      rc=0
    else
      echo "failed."
    fi
  else
    RES=$(docker ps -q -f status=running -f name=^/ssh-agent$)
    if [ ! "${RES}" ]; then
      echo -n "running whilp/ssh-agent... "
      # $(docker run -u $UID -d -v ssh:/ssh --name=ssh-agent whilp/ssh-agent:latest > /dev/null)
      $(docker run -d -v ssh:/ssh --name=ssh-agent whilp/ssh-agent:latest > /dev/null)
      if [[ $? -eq 0 ]]; then
        echo "done."
        rc=0
      else
        echo "failed."
      fi
    else
      rc=0
    fi
  fi

  return $rc
}

function check_ssh_key_enc() {
  local rc=-1

  $(grep -q ENCRYPTED ~/.ssh/test/id_rsa-ttss-test)
  if [[ $? -eq 0 ]]; then
    echo -n "ssh key is encrypted"
    # $(docker run -u $UID --rm -v ssh:/ssh -v $HOME:$HOME -t whilp/ssh-agent:latest ssh-add $HOME/.ssh/id_rsa >/dev/null)
    # if [[ $? -eq 0 ]]; then
    #   echo "done."
    #   rc=0
    # else
    #   echo "failed."
    # fi
  else
    rc=0
  fi

  return $rc
}

function check_ssh_key() {
  local rc=-1

  # $(docker run -u $UID --rm -v ssh:/ssh -v $HOME:$HOME -t whilp/ssh-agent:latest ssh-add -L >/dev/null)
  $(docker run --rm -v ssh:/ssh -v $HOME:$HOME -t whilp/ssh-agent:latest ssh-add -L >/dev/null)
  if [[ $? -ne 0 ]]; then
    echo -n "injecting ssh key... "
    # $(docker run -u $UID --rm -v ssh:/ssh -v $HOME:$HOME -t whilp/ssh-agent:latest ssh-add $HOME/.ssh/id_rsa >/dev/null)
    $(docker run --rm -v ssh:/ssh -v $HOME:$HOME -t whilp/ssh-agent:latest ssh-add $HOME/.ssh/id_rsa >/dev/null)
    if [[ $? -eq 0 ]]; then
      echo "done."
      rc=0
    else
      echo "failed."
    fi

  else
    rc=0
  fi

  return $rc
}

function check_dotfiles() {
  local RES=""

  if [ -d "$HOME/.dotfiles" ]; then
    RES="$HOME/.dotfiles"
  fi

  if [ -d "$HOME/dotfiles" ]; then
    RES="$HOME/dotfiles"
  fi

  echo $RES
}

check_dirs
if [[ $? -eq 0 ]]; then

  check_docker
  if [[ $? -eq 0 ]]; then

    # check_ssh_agent_container
    # if [[ $? -eq 0 ]]; then

      # check_ssh_key_enc

      # check_ssh_key
      # if [[ $? -eq 0 ]]; then

        RES=$(check_dotfiles)
        if [ "${RES}" ]; then
          CFG_DOCKER_VOLUMES="$CFG_DOCKER_VOLUMES -v $RES:/home/appflow/dotfiles"
        fi

        check_selinux

        docker run --name appflow --rm -t $CFG_DOCKER_VOLUMES $CFG_DOCKER_ENVS ttssdev/appflow:latest $@
        # docker run --name appflow --rm -t $CFG_DOCKER_VOLUMES $CFG_DOCKER_ENVS appflow $@

      # fi
    # fi

  else
    echo "Docker not available or not running."
    exit -1
  fi

else
  echo "Folder ~/.appflow or ~/.ssh missing."
  exit -1
fi

exit 0